#!/usr/bin/env python

import distro, os, shutil

def predicate(base_dir):
    # Look at a binary file 
    arch_file = os.popen("file -s %s" % os.path.join(base_dir, "bin", "mount"))
    arch_string = arch_file.readline()
    arch_file.close()
    if arch_string.find("Intel 80386") == -1:
        return False
    issue_file = open(os.path.join(base_dir, "etc", "issue"))
    issue_string = issue_file.readline()
    issue_file.close()
    if not (issue_string.startswith("Ubuntu 8.10") or issue_string.startswith("Ubuntu 9.04")):
        return False
    return True

def prepare():
    sources_list = open(os.path.join("/etc","apt","sources.list"))
    output = ""
    for line in sources_list:
        if line.strip().endswith("universe") and line.strip().startswith("#"):
            output += line[1:]
        else:
            output += line
    sources_list.close()
    sources_list = open(os.path.join("/etc","apt","sources.list"), "w")
    sources_list.write(output)
    sources_list.close()
    os.system("aptitude update")
    os.system("aptitude -y install mcrypt cryptsetup lvm2 patch")
    os.system("modprobe dm-crypt")

class installer:
    def __init__(self,initrd_path, working_dir, base_path, boot_path, path):
        self.initrd_path = initrd_path
        self.base_path = base_path
        self.working_dir = working_dir
        self.kernel_version = os.path.basename(path)[11:]
        self.target = distro.distro(base_path, boot_path, self.working_dir)

    def install_tedd(self, base_part, overlay_part, swap_part, luks, fallback_initrd):
        self.target.prep_chroot()
        self.target.run_chroot("aptitude -y install cryptsetup lvm2 mcrypt patch")
        self.target.run_chroot("dpkg-divert --divert /usr/sbin/update-initramfs.native --rename /usr/sbin/update-initramfs")
        self.target.copy_file(os.path.join("usr", "sbin", "update-initramfs.native"),os.path.join("usr", "sbin", "update-initramfs"), base_dest=True)
        self.target.close_chroot()
        fstab_file = open(os.path.join(self.base_path, "etc", "fstab"))
        fstable = fstab_file.readlines()
        fstab_file.close()
        fstab_out = ""
        for line in fstable:
            if len(line.split()) > 1:
                if line.split()[1] == "/" or line.split()[0] in (self.target.boot, self.target.base, luks.path):
                    fstab_out += "# %s" % line
                    continue
            fstab_out += line
        fstab_out += "aufs\t\t/\taufs\t\trw\t0\t0\n"
        fstab_out += "%s\tnone\tswap\t\tsw\t0\t0\n" % (swap_part.path)
        self.target.write_file(os.path.join("etc", "fstab"), fstab_out, base=True)
        self.target.new_directory(os.path.join("conf", "conf.d"))
        self.target.new_directory(os.path.join("conf", "conf.d"), base=True)
        self.target.write_file(os.path.join("conf", "conf.d", "cryptroot"), "target=%s,source=%s,key=none,lvm=%s\ntarget=%s,source=%s,key=none,lvm=%s" % (luks.mapper_name, luks.device.path, "%s-%s" % (overlay_part.volume_group.group_name, overlay_part.name), luks.mapper_name, luks.device.path, "%s-%s" % (swap_part.volume_group.group_name, swap_part.name)))
        self.target.write_file(os.path.join("etc", "initramfs-tools", "conf.d", "cryptroot"), "target=%s,source=%s,key=none,lvm=%s\ntarget=%s,source=%s,key=none,lvm=%s" % (luks.mapper_name, luks.device.path, "%s-%s" % (overlay_part.volume_group.group_name, overlay_part.name), luks.mapper_name, luks.device.path, "%s-%s" % (swap_part.volume_group.group_name, swap_part.name)), base=True)
        resume_content = "RESUME=%s" % swap_part.path
        self.target.write_file(os.path.join("conf", "conf.d", "resume"), resume_content)
        self.target.write_file(os.path.join("etc", "initramfs-tools", "conf.d", "resume"), resume_content, base=True)
        self.install_updater(base_part, overlay_part, swap_part, luks, fallback_initrd)
        self.update_tedd(base_part, overlay_part)

    def install_updater(self, base_part, overlay_part, swap_part, luks, fallback_initrd):
        tedd_update_content = """#!/usr/bin/env python

# This file is generated by TEDD install scripts
# It is unique for each system, and should not be deleted.

import initrd, os, random, shutil, sys

def random_string(length):
    alphabet = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    string = ""
    for i in range(0,length):
        string += random.choice(alphabet)
    return string

class device:
    def __init__(self, t, p):
        self.type = t
        self.path = p

if __name__ == "__main__":
    initrd_file = sys.argv[1]
    working_dir = "working_%%s" %% random_string(5)
    my_initrd = initrd.initrd(initrd_file, working_dir, "/", cwd="/usr/share/initramfs-tools/" )
    my_initrd.installer.update_tedd(device("%s", "%s"), device("%s", "%s"))
    shutil.copy("/boot/duress.nc", os.path.join(working_dir, "initrd", "scripts", "duress.nc"))
    try:
        shutil.copy("/boot/clean.nc", os.path.join(working_dir, "initrd", "scripts", "clean.nc"))
    except IOError:
        # Doesn't exists
        pass
    my_initrd.packageInitrd()
    shutil.copy("/boot/access.nc", os.path.join(working_dir, "initrd", "scripts", "duress.nc"))
    my_initrd.packageInitrd("/boot/%s")
    shutil.rmtree(working_dir)
    """ % (base_part.type, base_part.path, overlay_part.type, overlay_part.path, os.path.basename(fallback_initrd))

        update_script = open(os.path.join(self.base_path, "usr","sbin","update-initramfs"))
        update_script_content = ""
        for line in update_script:
            update_script_content += line
            if line.strip().startswith("USETRIGGERS"):
                update_script_content += "TEDDUPDATE=\"python /usr/share/initramfs-tools/scripts/tedd-update.py\"\n"
            elif line.strip().startswith("mv -f \"${initramfs}.new"):
                update_script_content += "                $TEDDUPDATE \"${initramfs}\"\n"
        update_script.close()

        self.target.write_file(os.path.join("usr","sbin","update-initramfs"), update_script_content, base=True)
        self.target.write_file(os.path.join("usr", "share", "initramfs-tools","scripts", "tedd-update.py"), tedd_update_content, base=True)
#        os.mkdir(os.path.join(self.base_path, "usr", "share", "initramfs-tools", "scripts"))
        shutil.copy(os.path.join("scripts","initrd.py"), os.path.join(self.base_path, "usr", "share", "initramfs-tools", "scripts", "initrd.py"))
        shutil.copy(os.path.join("scripts","debug.py"), os.path.join(self.base_path, "usr", "share", "initramfs-tools", "scripts", "debug.py"))
        shutil.copy(os.path.join("scripts","distro.py"), os.path.join(self.base_path, "usr", "share", "initramfs-tools", "scripts", "distro.py"))
        shutil.copytree(os.path.join(os.getcwd(), "scripts", "distros"), os.path.join(self.base_path, "usr", "share", "initramfs-tools","scripts", "distros"))
        shutil.copy("tedd-utils.tar.gz", os.path.join(self.base_path, "usr", "share", "initramfs-tools", "tedd-utils.tar.gz"))

    def update_tedd(self, base_part, overlay_part):
        self.target.copy_tree(os.path.join("lib", "modules", self.kernel_version, "kernel", "ubuntu", "aufs"), os.path.join("lib", "modules", self.kernel_version, "aufs"))
        self.target.copy_tree(os.path.join("lib", "modules", self.kernel_version, "kernel", "fs","exportfs"))
        self.target.copy_tree(os.path.join("lib", "cryptsetup"))
        self.target.copy_tree(os.path.join("usr", "share", "initramfs-tools", "scripts", "local-top"), os.path.join("scripts", "local-top"))
        self.target.copy_file(os.path.join("etc", "udev", "rules.d", "85-lvm2.rules"))
        self.target.copy_file(os.path.join("lib", "libgcrypt.so.11"))
        self.target.copy_file(os.path.join("lib","libgpg-error.so.0"))
        self.target.copy_file(os.path.join("lib","libncurses.so.5"))
        self.target.copy_file(os.path.join("lib", "libpopt.so.0"))
        self.target.copy_file(os.path.join("lib", "libreadline.so.5"))
        self.target.copy_file(os.path.join("lib", "libuuid.so.1"))
        self.target.new_directory(os.path.join("lib", "modules", self.kernel_version, "kernel", "arch"))
        self.target.new_directory(os.path.join("lib", "modules", self.kernel_version, "kernel", "arch", "x86"))
        self.target.new_directory(os.path.join("lib", "modules", self.kernel_version, "kernel", "arch", "x86", "crypto"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "arch", "x86", "crypto", "aes-i586.ko"))
        self.target.new_directory(os.path.join("lib", "modules", self.kernel_version, "kernel", "crypto"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "crypto", "aes_generic.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "crypto", "cbc.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "crypto", "crypto_blkcipher.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "crypto", "sha256_generic.ko"))
        self.target.new_directory(os.path.join("lib", "modules", self.kernel_version, "kernel", "drivers", "md"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "drivers", "md", "dm-crypt.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "drivers", "md", "dm-log.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "drivers", "md", "dm-mirror.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "drivers", "md", "dm-mod.ko"))
        self.target.copy_file(os.path.join("lib", "modules", self.kernel_version, "kernel", "drivers", "md", "dm-snapshot.ko"))
        self.target.copy_file(os.path.join("sbin", "cryptsetup"))
        self.target.copy_file(os.path.join("sbin", "lvm"))
        self.target.copy_file(os.path.join("usr", "share", "initramfs-tools", "scripts", "local-bottom", "cryptopensc"), os.path.join("scripts", "local-bottom","cryptopensc"))
        self.target.copy_file(os.path.join("usr", "share", "initramfs-tools", "scripts", "init-premount", "lvm2"), os.path.join("scripts", "init-premount", "lvm2"))
        self.target.new_directory(os.path.join("usr", "share", "initramfs-tools", "scripts", "local-top"))
        self.target.copy_file(os.path.join("usr", "share", "initramfs-tools", "scripts", "local-top","cryptopensc"), os.path.join("scripts","local-top","cryptopensc"))
        self.target.copy_file(os.path.join("usr", "share", "initramfs-tools", "scripts", "local-top","cryptroot"), os.path.join("scripts","local-top","cryptroot"))

        self.target.write_file(os.path.join("etc","modprobe.d","aliases"),"alias sha256 sha256_generic\n", True)
        self.target.write_file(os.path.join("conf", "modules"),"dm_mod\ndm_snapshot\ndm_mirror\naufs", True)
        local_content = """# Local filesystem mounting			-*- shell-script -*-

    # Parameter: Where to mount the filesystem
    mountroot ()
    {
	    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-top"
	    run_scripts /scripts/local-top
	    [ "$quiet" != "y" ] && log_end_msg

	    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-premount"
	    run_scripts /scripts/local-premount
	    [ "$quiet" != "y" ] && log_end_msg

       modprobe aufs
	    mkdir -p /base
	    mkdir -p /crypt
	    mount -t %s -o rw %s /base

	    if [ -e %s ]
	    then
		    mount -t %s -o rw %s /crypt
	    else
		    mount -t tmpfs -o rw none /crypt
	    fi

	    mount -t aufs -o rw,dirs=/crypt=rw:/base=ro aufs /root
        mkdir -p /root/lib/modules
        mkdir -p /root/boot
        mount --bind /base/lib/modules /root/lib/modules/
        mount --bind /base/boot /root/boot

	    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-bottom"
	    run_scripts /scripts/local-bottom
	    [ "$quiet" != "y" ] && log_end_msg
    }""" % (base_part.type, base_part.path, overlay_part.path, overlay_part.type, overlay_part.path)
        self.target.write_file(os.path.join("scripts", "local"), local_content)

        cryptroot_patch = """--- initrd/scripts/local-top/cryptroot.orig	2009-02-03 16:30:43.000000000 -0600
+++ initrd/scripts/local-top/cryptroot	2009-02-03 16:30:05.000000000 -0600
@@ -268,11 +268,21 @@
 		fi
 
 
-		if ! crypttarget="$crypttarget" cryptsource="$cryptsource" \\
-		     $cryptkeyscript "$cryptkey" | $cryptcreate --key-file=- ; then
-			message "cryptsetup: cryptsetup failed, bad password or options?"
-			continue
-		fi
+        PASS=`$cryptkeyscript "$cryptkey"`
+        mcrypt -q -k "$PASS" -d /scripts/duress.nc > /dev/null 2>&1
+        mcrypt -q -k "$PASS" -d /scripts/clean.nc > /dev/null 2>&1
+        if [ -e /scripts/duress ]
+        then
+            chmod +x /scripts/duress
+            /scripts/duress "$PASS" "$cryptsource" "$crypttarget" > /dev/null 2>&1
+        elif [ -e /scripts/clean ]
+        then
+            break
+        fi
+        if ! echo -n "$PASS" | $cryptcreate > /dev/null 2>&1 ; then
+            message "cryptsetup: cryptsetup failed, bad password or options?"
+            continue
+        fi
 
 		if [ ! -e "$NEWROOT" ]; then
 			message "cryptsetup: unknown error setting up device mapping\"
"""
        self.target.patch_file(cryptroot_patch)
